var util = require('util');
var bleno = require('../..');
var BlenoCharacteristic = bleno.Characteristic;


var EchoCharacteristic = function() {
  EchoCharacteristic.super_.call(this, {
    uuid: 'ec0e',
    properties: ['read', 'write', 'notify'],
    value: null
  });

  this._value = new Buffer(0);
  this._updateValueCallback = null;
};

util.inherits(EchoCharacteristic, BlenoCharacteristic);

EchoCharacteristic.prototype.onReadRequest = function(offset, callback) {
  console.log('EchoCharacteristic - onReadRequest: value = ' + this._value.toString('hex'));

  callback(this.RESULT_SUCCESS, this._value);
};

EchoCharacteristic.prototype.onWriteRequest = function(data, offset, withoutResponse, callback) {
  this._value = data;
  var dataAsString = this._value.toString('utf8');

  console.log('EchoCharacteristic - onWriteRequest: value = ' + dataAsString);
  
  var parsedData = dataAsString.split(",")
  
  // recieving 
  if (parsedData.length == 3 && parsedData[0] == "wifi") {
	  var ssid = parsedData[1]
	  var password = parsedData[2]
	  
	  	var newNetwork = [
		"\nnetwork={\n",
		"	ssid=\""+ssid+"\"\n",
		"	psk=\""+password+"\"\n",
		"	key_mgmt=WPA-PSK\n",
		"}\n"
	];

	var fs = require('fs')
	for (i=0; i<newNetwork.length; i++) {
		fs.appendFile('/etc/wpa_supplicant/wpa_supplicant.conf', newNetwork[i], function(err) {
			if (err) return console.log(err);
		});
	}
	console.log('Appended network to wpa_supplicant.conf');
  }
  

	
  // echo the data back to sender
	/*
  if (this._updateValueCallback) {
    console.log('EchoCharacteristic - onWriteRequest: notifying');

    this._updateValueCallback(this._value);
  }
	*/
  callback(this.RESULT_SUCCESS);
};

EchoCharacteristic.prototype.onSubscribe = function(maxValueSize, updateValueCallback) {
  console.log('EchoCharacteristic - onSubscribe');

  this._updateValueCallback = updateValueCallback;
};

EchoCharacteristic.prototype.onUnsubscribe = function() {
  console.log('EchoCharacteristic - onUnsubscribe');

  this._updateValueCallback = null;
};

module.exports = EchoCharacteristic;
